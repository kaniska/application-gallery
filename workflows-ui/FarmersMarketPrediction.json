{
  "name": "Farmer_markets_Prediction",
  "category": "Machine Learning",
  "description": "Farmer markets prediction in each zipcode with the help of tax data",
  "nodes": [
    {
      "id": "1",
      "name": "DatasetStructured",
      "type": "dataset",
      "nodeClass": "fire.nodes.dataset.NodeDatasetStructured",
      "x": "25.7422px",
      "y": "11.375px",
      "fields": [
        {
          "name": "dataset",
          "value": "1defab5a-93fa-410b-96f1-ef44e5332f94",
          "widget": "dataset",
          "title": "Dataset",
          "description": "Selected Dataset",
          "required": false,
          "display": true
        }
      ]
    },
    {
      "id": "2",
      "name": "ColumnFilter",
      "description": "This node creates a new DataFrame that contains only the selected columns",
      "type": "transform",
      "nodeClass": "fire.nodes.etl.NodeColumnFilter",
      "x": "36.4102px",
      "y": "155.082px",
      "fields": [
        {
          "name": "outputCols",
          "value": "[\"STATE\",\"zipcode\",\"MARS1\",\"MARS2\",\"NUMDEP\",\"A02650\",\"A00300\",\"A00900\",\"A01000\"]",
          "widget": "variables",
          "title": "Columns",
          "description": "Columns to be included in the output DataFrame",
          "required": false,
          "display": false
        }
      ]
    },
    {
      "id": "6",
      "name": "SQL",
      "description": "This node runs the given SQL on the incoming DataFrame",
      "type": "transform",
      "nodeClass": "fire.nodes.etl.NodeSQL",
      "x": "221.457px",
      "y": "300.117px",
      "fields": [
        {
          "name": "tempTable",
          "value": "fire_temp_table",
          "widget": "textfield",
          "title": "Temp Table",
          "description": "Temp Table Name to be used",
          "required": false,
          "display": false
        },
        {
          "name": "sql",
          "value": "select zipcode, sum(MARS1) as single_returns, sum(MARS2) as joint_returns, sum(NUMDEP) as numdep, sum(A02650) as total_income_amount, sum(A00300) as taxable_interest_amount from fire_temp_table group by zipcode",
          "widget": "textarea_medium",
          "title": "SQL",
          "description": "SQL to be run",
          "required": false,
          "display": false
        },
        {
          "name": "outputColNames",
          "value": "[\"zipcode\",\"single_returns\",\"joint_returns\",\"numdep\",\"total_income_amount\",\"taxable_interest_amount\"]",
          "widget": "schema_col_names",
          "title": "Output Column Names",
          "description": "Name of the Output Columns",
          "required": false,
          "display": false
        },
        {
          "name": "outputColTypes",
          "value": "[\"INTEGER\",\"DOUBLE\",\"DOUBLE\",\"DOUBLE\",\"DOUBLE\",\"DOUBLE\"]",
          "widget": "schema_col_types",
          "title": "Output Column Types",
          "description": "Data Type of the Output Columns",
          "required": false,
          "display": false
        },
        {
          "name": "outputColFormats",
          "value": "[\"\",\"\",\"\",\"\",\"\",\"\"]",
          "widget": "schema_col_formats",
          "title": "Output Column Formats",
          "description": "Format of the Output Columns",
          "required": false,
          "display": false
        }
      ]
    },
    {
      "id": "8",
      "name": "DatasetStructured",
      "type": "dataset",
      "nodeClass": "fire.nodes.dataset.NodeDatasetStructured",
      "x": "46.4453px",
      "y": "591.438px",
      "fields": [
        {
          "name": "dataset",
          "value": "9c96f8d9-44b9-4fe8-be58-35ba65953773",
          "widget": "dataset",
          "title": "Dataset",
          "description": "Selected Dataset",
          "required": false,
          "display": true
        }
      ]
    },
    {
      "id": "9",
      "name": "SQL",
      "description": "This node runs the given SQL on the incoming DataFrame",
      "type": "transform",
      "nodeClass": "fire.nodes.etl.NodeSQL",
      "x": "217.945px",
      "y": "449.559px",
      "fields": [
        {
          "name": "tempTable",
          "value": "fire_temp_table",
          "widget": "textfield",
          "title": "Temp Table",
          "description": "Temp Table Name to be used",
          "required": false,
          "display": false
        },
        {
          "name": "sql",
          "value": "select cast(zip as int) as zip, count(*) as count from fire_temp_table group by zip",
          "widget": "textarea_medium",
          "title": "SQL",
          "description": "SQL to be run",
          "required": false,
          "display": false
        },
        {
          "name": "outputColNames",
          "value": "[\"zip\",\"count\"]",
          "widget": "schema_col_names",
          "title": "Output Column Names",
          "description": "Name of the Output Columns",
          "required": false,
          "display": false
        },
        {
          "name": "outputColTypes",
          "value": "[\"INTEGER\",\"LONG\"]",
          "widget": "schema_col_types",
          "title": "Output Column Types",
          "description": "Data Type of the Output Columns",
          "required": false,
          "display": false
        },
        {
          "name": "outputColFormats",
          "value": "[\"\",\"\"]",
          "widget": "schema_col_formats",
          "title": "Output Column Formats",
          "description": "Format of the Output Columns",
          "required": false,
          "display": false
        }
      ]
    },
    {
      "id": "10",
      "name": "Join Using SQL",
      "description": "This node registers the incoming DataFrames as temporary tables and executes the SQL provided",
      "type": "join",
      "nodeClass": "fire.nodes.etl.NodeJoinUsingSQL",
      "x": "449.137px",
      "y": "384.773px",
      "fields": [
        {
          "name": "tempTable1",
          "value": "fire_temp_table1",
          "widget": "textfield",
          "title": "Temp Table1",
          "description": "Temp Table Name to be used",
          "required": false,
          "display": false
        },
        {
          "name": "tempTable2",
          "value": "fire_temp_table2",
          "widget": "textfield",
          "title": "Temp Table2",
          "description": "Temp Table Name to be used",
          "required": false,
          "display": false
        },
        {
          "name": "sql",
          "value": "select  a.zipcode , a.single_returns, a.joint_returns, a.numdep, a.total_income_amount, a.taxable_interest_amount, b.count, b.zip from  fire_temp_table1 a LEFT OUTER JOIN fire_temp_table2 b ON(a.zipcode=b.zip)",
          "widget": "textarea_large",
          "title": "SQL",
          "description": "SQL to be run",
          "required": false,
          "display": false
        },
        {
          "name": "outputColNames",
          "value": "[\"zipcode\",\"single_returns\",\"joint_returns\",\"numdep\",\"total_income_amount\",\"taxable_interest_amount\",\"count\",\"zip\"]",
          "widget": "schema_col_names",
          "title": "Column Names for the CSV",
          "description": "New Output Columns of the SQL",
          "required": false,
          "display": false
        },
        {
          "name": "outputColTypes",
          "value": "[\"INTEGER\",\"DOUBLE\",\"DOUBLE\",\"DOUBLE\",\"DOUBLE\",\"DOUBLE\",\"LONG\",\"INTEGER\"]",
          "widget": "schema_col_types",
          "title": "Column Types for the CSV",
          "description": "Data Type of the Output Columns",
          "required": false,
          "display": false
        },
        {
          "name": "outputColFormats",
          "value": "[\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\"]",
          "widget": "schema_col_formats",
          "title": "Column Formats for the CSV",
          "description": "Format of the Output Columns",
          "required": false,
          "display": false
        }
      ]
    },
    {
      "id": "11",
      "name": "CastColumnType",
      "description": "This node creates a new DataFrame by casting input columns with a new data type",
      "type": "transform",
      "nodeClass": "fire.nodes.etl.NodeCastColumnType",
      "x": "433.188px",
      "y": "195.832px",
      "fields": [
        {
          "name": "inputCols",
          "value": "[\"count\"]",
          "widget": "variables",
          "title": "Columns",
          "description": "Columns to be cast to new data type",
          "required": false,
          "display": false
        },
        {
          "name": "outputColType",
          "value": "DOUBLE",
          "widget": "array",
          "title": "New Data Type",
          "description": "New data type(INTEGER, DOUBLE, STRING, LONG, SHORT)",
          "optionsArray": [
            "BOOLEAN",
            "BYTE",
            "DATE",
            "DOUBLE",
            "FLOAT",
            "INTEGER",
            "LONG",
            "SHORT",
            "STRING",
            "TIMESTAMP"
          ],
          "required": false,
          "display": false
        }
      ]
    },
    {
      "id": "12",
      "name": "ImputingWithConstant",
      "description": "Imputing with constant",
      "type": "transform",
      "nodeClass": "fire.nodes.ml.NodeReplaceMissingValueWithConstant",
      "x": "414.617px",
      "y": "45.25px",
      "fields": [
        {
          "name": "colNames",
          "value": "[\"zipcode\",\"single_returns\",\"joint_returns\",\"numdep\",\"total_income_amount\",\"taxable_interest_amount\",\"count\",\"zip\"]",
          "widget": "variables_map",
          "title": "Columns",
          "description": "Columns to be processed for missing values",
          "required": false,
          "display": false
        },
        {
          "name": "constants",
          "value": "[\"\",\"\",\"\",\"\",\"\",\"\",\"0\",\"0\"]",
          "widget": "variables_map_edit",
          "title": "Constants",
          "description": "Missing value will be replaced with constant",
          "required": false,
          "display": false
        }
      ]
    },
    {
      "id": "13",
      "name": "VectorAssembler",
      "description": "Merges multiple columns into a vector column",
      "type": "ml-transformer",
      "nodeClass": "fire.nodes.ml.NodeVectorAssembler",
      "x": "720.387px",
      "y": "39.0312px",
      "fields": [
        {
          "name": "inputCols",
          "value": "[\"single_returns\",\"joint_returns\",\"numdep\",\"total_income_amount\",\"taxable_interest_amount\"]",
          "widget": "variables",
          "title": "Input Columns",
          "description": "Input column of type - all numeric, boolean and vector",
          "datatypes": [
            "integer",
            "long",
            "double",
            "float",
            "vectorudt"
          ],
          "required": false,
          "display": false
        },
        {
          "name": "outputCol",
          "value": "feature_vector",
          "widget": "textfield",
          "title": "Output Column",
          "description": "Output column name",
          "required": false,
          "display": false
        }
      ]
    },
    {
      "id": "14",
      "name": "Split",
      "type": "transform",
      "nodeClass": "fire.nodes.ml.NodeSplit",
      "x": "739.66px",
      "y": "252.285px",
      "fields": [
        {
          "name": "fraction1",
          "value": ".7",
          "widget": "textfield",
          "title": "Fraction 1",
          "required": false,
          "display": false
        }
      ]
    },
    {
      "id": "15",
      "name": "LinearRegression",
      "description": "",
      "type": "ml-estimator",
      "nodeClass": "fire.nodes.ml.NodeLinearRegression",
      "x": "960.723px",
      "y": "132.344px",
      "fields": [
        {
          "name": "featuresCol",
          "value": "feature_vector",
          "widget": "variable",
          "title": "Features Column",
          "description": "Features column of type vectorUDT for model fitting",
          "datatypes": [
            "vectorudt"
          ],
          "required": false,
          "display": false
        },
        {
          "name": "labelCol",
          "value": "count",
          "widget": "variable",
          "title": "Label Column",
          "description": "The label column for model fitting",
          "datatypes": [
            "double"
          ],
          "required": false,
          "display": false
        },
        {
          "name": "predictionCol",
          "value": "",
          "widget": "textfield",
          "title": "Prediction Columns",
          "description": "The prediction column created during model scoring",
          "required": false,
          "display": false
        },
        {
          "name": "fitIntercept",
          "value": "true",
          "widget": "array",
          "title": "Fit Intercept",
          "description": "Whether to fit an intercept term",
          "datatypes": [
            "boolean"
          ],
          "optionsArray": [
            "true",
            "false"
          ],
          "required": false,
          "display": false
        },
        {
          "name": "maxIter",
          "value": "10",
          "widget": "textfield",
          "title": "Maximum Iterations",
          "description": "Maximum number of iterations (>= 0)",
          "datatypes": [
            "integer"
          ],
          "required": false,
          "display": false
        },
        {
          "name": "regParam",
          "value": "0.0",
          "widget": "textfield",
          "title": "Regularization Param",
          "description": "The regularization parameter",
          "datatypes": [
            "double"
          ],
          "required": false,
          "display": false
        },
        {
          "name": "elasticNetParam",
          "value": "0.5",
          "widget": "textfield",
          "title": "ElasticNet Param",
          "description": "The ElasticNet mixing parameter. For alpha = 0, the penalty is an L2 penalty. For alpha = 1, it is an L1 penalty",
          "datatypes": [
            "double"
          ],
          "required": false,
          "display": false
        },
        {
          "name": "solver",
          "value": "auto",
          "widget": "array",
          "title": "Solver",
          "description": "The solver algorithm for optimization",
          "optionsArray": [
            "auto",
            "l-bfgs",
            "normal"
          ],
          "required": false,
          "display": false
        },
        {
          "name": "standardization",
          "value": "true",
          "widget": "array",
          "title": "Standardization",
          "description": "Whether to standardize the training features before fitting the model",
          "datatypes": [
            "boolean"
          ],
          "optionsArray": [
            "true",
            "false"
          ],
          "required": false,
          "display": false
        },
        {
          "name": "tol",
          "value": "1E-3",
          "widget": "textfield",
          "title": "Tolerance",
          "description": "The convergence tolerance for iterative algorithms",
          "datatypes": [
            "double"
          ],
          "required": false,
          "display": false
        },
        {
          "name": "weightCol",
          "value": "",
          "widget": "textfield",
          "title": "Weight Column",
          "description": "If the 'weight column' is not specified, all instances are treated equally with a weight 1.0",
          "required": false,
          "display": false
        },
        {
          "name": "gridSearch",
          "value": "",
          "widget": "tab",
          "title": "Grid Search",
          "required": false,
          "display": false
        },
        {
          "name": "regParamGrid",
          "value": "",
          "widget": "textfield",
          "title": "Regularization Param Grid Search",
          "description": "Regularization Parameters for Grid Search",
          "required": false,
          "display": false
        },
        {
          "name": "elasticNetGrid",
          "value": "",
          "widget": "textfield",
          "title": "ElasticNet Param Grid Search",
          "description": "ElasticNet Parameters for Grid Search",
          "required": false,
          "display": false
        },
        {
          "name": "maxIterGrid",
          "value": "",
          "widget": "textfield",
          "title": "MaxIter Param Grid Search",
          "description": "Maximum iteration Parameters for Grid Search",
          "required": false,
          "display": false
        }
      ]
    },
    {
      "id": "16",
      "name": "Predict",
      "type": "ml-predict",
      "nodeClass": "fire.nodes.ml.NodePredict",
      "x": "982.957px",
      "y": "363.598px",
      "fields": []
    },
    {
      "id": "17",
      "name": "PrintNRows",
      "description": "Prints the specified number of records in the DataFrame",
      "type": "transform",
      "nodeClass": "fire.nodes.util.NodePrintFirstNRows",
      "x": "962.465px",
      "y": "550.125px",
      "fields": [
        {
          "name": "n",
          "value": "10",
          "widget": "textfield",
          "title": "Num Rows to Print",
          "description": "number of rows to be printed",
          "required": false,
          "display": false
        }
      ]
    }
  ],
  "edges": [
    {
      "source": "1",
      "target": "2",
      "id": 1
    },
    {
      "source": "2",
      "target": "6",
      "id": 2
    },
    {
      "source": "8",
      "target": "9",
      "id": 3
    },
    {
      "source": "6",
      "target": "10",
      "id": 4
    },
    {
      "source": "9",
      "target": "10",
      "id": 5
    },
    {
      "source": "10",
      "target": "11",
      "id": 6
    },
    {
      "source": "11",
      "target": "12",
      "id": 7
    },
    {
      "source": "12",
      "target": "13",
      "id": 8
    },
    {
      "source": "13",
      "target": "14",
      "id": 9
    },
    {
      "source": "14",
      "target": "15",
      "id": 10
    },
    {
      "source": "15",
      "target": "16",
      "id": 11
    },
    {
      "source": "14",
      "target": "16",
      "id": 12
    },
    {
      "source": "16",
      "target": "17",
      "id": 13
    }
  ]
}