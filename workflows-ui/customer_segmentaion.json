{
  "name": "segmentaion - example",
  "category": "ML",
  "description": "customer segmentaion - RFM",
  "nodes": [
    {
      "id": "1",
      "name": "DatasetStructured",
      "type": "dataset",
      "nodeClass": "fire.nodes.dataset.NodeDatasetStructured",
      "x": "41px",
      "y": "50.625px",
      "fields": [
        {
          "name": "dataset",
          "value": "9fb4dea1-daa3-4abc-ad92-0200d56fcead",
          "widget": "dataset",
          "title": "Dataset",
          "description": "Selected Dataset",
          "required": false
        }
      ]
    },
    {
      "id": "6",
      "name": "SQL",
      "description": "This node runs the given SQL on the incoming DataFrame",
      "type": "transform",
      "nodeClass": "fire.nodes.etl.NodeSQL",
      "x": "301px",
      "y": "84.625px",
      "fields": [
        {
          "name": "tempTable",
          "value": "fire_temp_table",
          "widget": "textfield",
          "title": "Temp Table",
          "description": "Temp Table Name to be used",
          "required": false
        },
        {
          "name": "sql",
          "value": "select id, customer_id, product_id, amount, date from fire_temp_table LIMIT 1000",
          "widget": "textarea_large",
          "title": "SQL",
          "description": "SQL to be run",
          "required": false
        },
        {
          "name": "columns",
          "value": "id customer_id product_id amount date",
          "widget": "textarea_small",
          "title": "SQL Output Column Names separated by space",
          "description": "New Output Columns of the SQL",
          "required": false
        },
        {
          "name": "columnTypes",
          "value": "long string string double string",
          "widget": "textarea_small",
          "title": "SQL Output Column Types separated by space",
          "description": "Data Type of the Output Columns",
          "required": false
        }
      ]
    },
    {
      "id": "7",
      "name": "FieldSplitter",
      "description": "",
      "type": "transform",
      "nodeClass": "fire.nodes.etl.NodeFieldSplitter",
      "x": "485px",
      "y": "33.6406px",
      "fields": [
        {
          "name": "inputCol",
          "value": "date",
          "widget": "variable",
          "title": "Input Column",
          "description": "",
          "datatypes": [
            "string"
          ],
          "required": false
        },
        {
          "name": "outputCols",
          "value": "dt,time",
          "widget": "textfield",
          "title": "Column Names",
          "description": "new column names separed by comma','.(ex: col1,co2,col3)",
          "required": false
        },
        {
          "name": "sep",
          "value": " ",
          "widget": "textfield",
          "title": "Separator",
          "description": "separator to split the input column value(default: space)",
          "required": false
        }
      ]
    },
    {
      "id": "8",
      "name": "ColumnFilter",
      "description": "This node creates a new DataFrame that contains only the selected columns",
      "type": "transform",
      "nodeClass": "fire.nodes.etl.NodeColumnFilter",
      "x": "710px",
      "y": "143.641px",
      "fields": [
        {
          "name": "columns",
          "value": "[\"id\",\"customer_id\",\"product_id\",\"amount\",\"dt\"]",
          "widget": "variables",
          "title": "Columns",
          "description": "Columns to be included in the output DataFrame",
          "required": false
        }
      ]
    },
    {
      "id": "9",
      "name": "Scala",
      "description": "This node runs any given Scala code. The input dataframe is passed in the variable inDF. The output dataframe is passed back by registering it as a temporary table.",
      "type": "transform",
      "nodeClass": "fire.nodes.etl.NodeScala",
      "x": "524px",
      "y": "247.641px",
      "fields": [
        {
          "name": "code",
          "value": "import java.text.SimpleDateFormat\nimport java.util.Date\nimport org.apache.spark.sql.types.{StructType, StructField, LongType, StringType, IntegerType, DoubleType};\nimport org.apache.spark.sql.Row;\n\n\t\nval defaultDateFormatter = new SimpleDateFormat(\"yyyy-MM-dd\")\nval tempRecords = inDF.rdd.map(row => (row.getLong(0), row.getString(1), row.getString(2), row.getDouble(3), row.getString(4)))\nval records = tempRecords.map(v => v match {case (id, customer_id, product_id, amount, dt) => (customer_id,(defaultDateFormatter.parse(dt), amount))})\n\nval rRecords = records.map(v => (v._1, ((new Date).getTime - v._2._1.getTime)/(24 * 60 * 60 * 1000))).reduceByKey((a:Long, b:Long) => Math.min(a,b))\nval fRecords = records.map(v =>(v._1, 1)).reduceByKey((a:Int,b:Int) => a + b)\nval mRecords = records.map(v =>(v._1, v._2._2)).reduceByKey((a:Double, b:Double) => a + b)\n\nval rfmRecords = rRecords.join(fRecords).join(mRecords).map(v => v match { case (customer_id, ((rValue, fValue), mValue)) => Row(customer_id, rValue, fValue, mValue)})\n                                                                          \nval schema = new StructType(Array(StructField(\"customer_id\", StringType, nullable = true),StructField(\"rValue\", LongType, nullable = true), StructField(\"fValue\", IntegerType, nullable = true), StructField(\"mValue\", DoubleType, nullable = true)))\n\nval outDF = sqlContext.createDataFrame(rfmRecords, schema)\noutDF.registerTempTable(\"outDF\")",
          "widget": "textarea_large",
          "title": "Scala",
          "description": "Scala code to be run. Input dataframe is in \"inDF\". Output/Result dataframe should be registered as a temporary table - df.registerTempTable(\"outDF\")",
          "required": false
        },
        {
          "name": "columns",
          "value": "customer_id rValue fValue mValue",
          "widget": "textarea_small",
          "title": "Output DataFrame Column Names separated by space",
          "description": "Output DataFrame column names",
          "required": false
        },
        {
          "name": "columnTypes",
          "value": "string long integer double",
          "widget": "textarea_small",
          "title": "Output DataFrames Column Types",
          "description": "Data Type of the Output Columns",
          "required": false
        }
      ]
    },
    {
      "id": "11",
      "name": "SQL",
      "description": "This node runs the given SQL on the incoming DataFrame",
      "type": "transform",
      "nodeClass": "fire.nodes.etl.NodeSQL",
      "x": "294px",
      "y": "189.641px",
      "fields": [
        {
          "name": "tempTable",
          "value": "fire_temp_table",
          "widget": "textfield",
          "title": "Temp Table",
          "description": "Temp Table Name to be used",
          "required": false
        },
        {
          "name": "sql",
          "value": "select customer_id, rValue, fValue , mValue,\ncase when rValue <= 35   then 3.0 \n         when rValue  > 35 and rValue <= 112 then 2.0\n         else 1.0\n         end as rScore,\ncase when fValue >= 15 then 3.0\n         when fValue >= 4 and fValue < 15 then 2.0\n         else 1.0\n         end as fScore,\ncase when mValue >= 50000.0 then 3.0\n         when mValue >= 25000.0 and mValue < 50000.0 then 2.0\n         else 1.0\n         end as mScore,\nmValue / fValue  as avg_amount from fire_temp_table",
          "widget": "textarea_large",
          "title": "SQL",
          "description": "SQL to be run",
          "required": false
        },
        {
          "name": "columns",
          "value": "customer_id rValue fValue mValue rScore fScore mScore avg_amount",
          "widget": "textarea_small",
          "title": "SQL Output Column Names separated by space",
          "description": "New Output Columns of the SQL",
          "required": false
        },
        {
          "name": "columnTypes",
          "value": "string long integer double double double double double",
          "widget": "textarea_small",
          "title": "SQL Output Column Types separated by space",
          "description": "Data Type of the Output Columns",
          "required": false
        }
      ]
    },
    {
      "id": "12",
      "name": "SQL",
      "description": "This node runs the given SQL on the incoming DataFrame",
      "type": "transform",
      "nodeClass": "fire.nodes.etl.NodeSQL",
      "x": "85px",
      "y": "205.656px",
      "fields": [
        {
          "name": "tempTable",
          "value": "fire_temp_table",
          "widget": "textfield",
          "title": "Temp Table",
          "description": "Temp Table Name to be used",
          "required": false
        },
        {
          "name": "sql",
          "value": "select customer_id, cast( (rScore + fScore + mScore) as Double) as  rfmScore, avg_amount from fire_temp_table",
          "widget": "textarea_large",
          "title": "SQL",
          "description": "SQL to be run",
          "required": false
        },
        {
          "name": "columns",
          "value": "customer_id rfmScore avg_amount",
          "widget": "textarea_small",
          "title": "SQL Output Column Names separated by space",
          "description": "New Output Columns of the SQL",
          "required": false
        },
        {
          "name": "columnTypes",
          "value": "string double double",
          "widget": "textarea_small",
          "title": "SQL Output Column Types separated by space",
          "description": "Data Type of the Output Columns",
          "required": false
        }
      ]
    },
    {
      "id": "13",
      "name": "VectorAssembler",
      "description": "Merges multiple columns into a vector column",
      "type": "ml-transformer",
      "nodeClass": "fire.nodes.ml.NodeVectorAssembler",
      "x": "29px",
      "y": "472.656px",
      "fields": [
        {
          "name": "inputCols",
          "value": "[\"rfmScore\",\"avg_amount\"]",
          "widget": "variables",
          "title": "Input Columns",
          "description": "Input column of type - all numeric, boolean and vector",
          "datatypes": [
            "integer",
            "long",
            "double",
            "float",
            "vectorudt"
          ],
          "required": false
        },
        {
          "name": "outputCol",
          "value": "feature",
          "widget": "textfield",
          "title": "Output Column",
          "description": "Output column name",
          "required": false
        }
      ]
    },
    {
      "id": "15",
      "name": "KMeans",
      "description": "K-means clustering with support for k-means|| initialization proposed by Bahmani et al",
      "type": "ml-estimator",
      "nodeClass": "fire.nodes.ml.NodeKMeans",
      "x": "678px",
      "y": "340.656px",
      "fields": [
        {
          "name": "featuresCol",
          "value": "feature",
          "widget": "variable",
          "title": "Features Column",
          "description": "Features column of type vectorUDT for model fitting.",
          "datatypes": [
            "vectorudt"
          ],
          "required": false
        },
        {
          "name": "k",
          "value": "5",
          "widget": "textfield",
          "title": "K",
          "description": "The number of clusters to create.",
          "datatypes": [
            "integer"
          ],
          "required": false
        },
        {
          "name": "maxIter",
          "value": "10",
          "widget": "textfield",
          "title": "Max Iterations",
          "description": "The maximum number of iterations.",
          "datatypes": [
            "integer"
          ],
          "required": false
        },
        {
          "name": "predictionCol",
          "widget": "variable",
          "title": "Prediction Column",
          "description": "The prediction column created during model scoring.",
          "required": false
        },
        {
          "name": "seed",
          "value": "",
          "widget": "textfield",
          "title": "Seed",
          "description": "Random Seed.",
          "datatypes": [
            "long"
          ],
          "required": false
        },
        {
          "name": "tol",
          "value": "1e-4",
          "widget": "textfield",
          "title": "Tolerence",
          "description": "The convergence tolerance for iterative algorithms.",
          "datatypes": [
            "double"
          ],
          "required": false
        },
        {
          "name": "initMode",
          "value": "k-means||",
          "widget": "array",
          "title": "initMode",
          "description": "The initialization algorithm mode.",
          "optionsArray": [
            "k-means||",
            "random"
          ],
          "required": false
        },
        {
          "name": "initSteps",
          "value": "5",
          "widget": "textfield",
          "title": "initSteps",
          "description": "The number of steps for the k-means|| initialization mode. It will be ignored when other initialization modes are chosen.",
          "datatypes": [
            "integer"
          ],
          "required": false
        }
      ]
    },
    {
      "id": "16",
      "name": "Predict",
      "type": "ml-predict",
      "nodeClass": "fire.nodes.ml.NodePredict",
      "x": "382px",
      "y": "509.656px",
      "fields": []
    },
    {
      "id": "17",
      "name": "Split",
      "type": "transform",
      "nodeClass": "fire.nodes.ml.NodeSplit",
      "x": "260px",
      "y": "345.656px",
      "fields": [
        {
          "name": "fraction1",
          "value": ".5",
          "widget": "textfield",
          "title": "Fraction 1",
          "required": false
        }
      ]
    },
    {
      "id": "18",
      "name": "PPPrintNRows",
      "description": "Prints the specified number of records in the DataFrame",
      "type": "transform",
      "nodeClass": "fire.examples.nodes.NodeTestPrintFirstNRows",
      "x": "659px",
      "y": "503.656px",
      "fields": [
        {
          "name": "n",
          "value": "10",
          "widget": "textfield",
          "title": "Num Rows to Print",
          "required": false
        }
      ]
    }
  ],
  "edges": [
    {
      "source": "1",
      "target": "6",
      "id": 1
    },
    {
      "source": "6",
      "target": "7",
      "id": 2
    },
    {
      "source": "7",
      "target": "8",
      "id": 3
    },
    {
      "source": "8",
      "target": "9",
      "id": 4
    },
    {
      "source": "9",
      "target": "11",
      "id": 6
    },
    {
      "source": "11",
      "target": "12",
      "id": 7
    },
    {
      "source": "12",
      "target": "13",
      "id": 8
    },
    {
      "source": "15",
      "target": "16",
      "id": 13
    },
    {
      "source": "13",
      "target": "17",
      "id": 14
    },
    {
      "source": "17",
      "target": "15",
      "id": 15
    },
    {
      "source": "17",
      "target": "16",
      "id": 16
    },
    {
      "source": "16",
      "target": "18",
      "id": 17
    }
  ]
}